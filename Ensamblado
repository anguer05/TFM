#*************************#
#** PARTICIÓN DE DATOS  **#
#*************************#


# Particion de datos Senbis
set.seed(12345)
partitionIndex <- createDataPartition(sent$gana, p=0.8, list=FALSE)
data_train <- sent[partitionIndex,]
data_test  <- sent[-partitionIndex,]


set.seed(12345)
partitionIndex <- createDataPartition(sen1bis$gana, p=0.8, list=FALSE)
data_train <- sen1bis[partitionIndex,]
data_test  <- sen1bis[-partitionIndex,]

set.seed(12345)
partitionIndex <- createDataPartition(dtbis$gana, p=0.8, list=FALSE)
train <- dtbis[partitionIndex,]
test  <- dtbis[-partitionIndex,]

dtbis<- select(dtbis,-ID)
pre18bis<-select(pre18bis,-ID)

dbis<- select(dtbis,-P12,-P4,-P3,-P8,-P6)
presinbis<-select(pre18bis,-P12,-P4,-P3,-P8,-P6)


set.seed(12345)
partitionIndex <- createDataPartition(dbis$gana, p=0.8, list=FALSE)
train <- dbis[partitionIndex,]
test  <- dbis[-partitionIndex,]

#*************************#
#** Seleccion variables **#
#*************************#

# aic
null<-glm(gana~1,data=data_train,family=binomial)
full<-glm(gana~.,data=data_train,family=binomial)
modeloBackAIC<-step(full, scope=list(lower=null, upper=full), direction="backward")
modeloStepAIC<-step(null, scope=list(lower=null, upper=full), direction="both")

modeloBackAIC$coefficients
modeloStepAIC$coefficients

# bic
modeloBackBIC<-step(full, scope=list(lower=null, upper=full), direction="backward", k=log(nrow(data_train)))
modeloStepBIC<-step(null, scope=list(lower=null, upper=full), direction="both",     k=log(nrow(data_train)))

modeloBackBIC$coefficients
modeloStepBIC$coefficients

# Particion de datos Sen1bis
set.seed(12345)
partitionIndex <- createDataPartition(sen1$gana, p=0.8, list=FALSE)
data_train <- sen1[partitionIndex,]
data_test  <- sen1[-partitionIndex,]

#*************************#
#** Seleccion variables **#
#*************************#

# aic
null<-glm(gana~1,data=data_train,family=binomial)
full<-glm(gana~.,data=data_train,family=binomial)
modeloBackAIC<-step(full, scope=list(lower=null, upper=full), direction="backward")
modeloStepAIC<-step(null, scope=list(lower=null, upper=full), direction="both")

modeloBackAIC$coefficients
modeloStepAIC$coefficients

# bic
modeloBackBIC<-step(full, scope=list(lower=null, upper=full), direction="backward", k=log(nrow(data_train)))
modeloStepBIC<-step(null, scope=list(lower=null, upper=full), direction="both",     k=log(nrow(data_train)))

modeloBackBIC$coefficients
modeloStepBIC$coefficients

mejores<-rbind(medias4,medias6,medias8,red6,t_forest3,t_forest4,t_forest15,t_forest18,t_forest20,boost6,xboost6,xboost8)

# APLICACIÃN CRUZADAS PARA ENSAMBLAR
rlog14<-cruzadalogistica(data=senbis,vardep="gana",
                          listconti=c("P30","P31","P32","P33"),
                          listclass=c("C17","C28"),
                          grupos=5,sinicio=1234,repe=10)
rlog14$modelo="Log16"

medias1bis<-as.data.frame(rlog14[1])
medias1bis$modelo<-"rlog14"
predi1<-as.data.frame(rlog14[2])
predi1$rlog14<-predi1$Yes

rlog9<-cruzadalogistica(data=senbis,vardep="gana",
                        listconti=c("P5","P12","P30","P32","P33"),
                        listclass=c(""),
                        grupos=5,sinicio=23461,repe=10)

rlog9$modelo="Log9" 

medias2bis<-as.data.frame(rlog9[1])
medias2bis$modelo<-"rlog9"
predi2<-as.data.frame(rlog9[2])
predi2$rlog9<-predi2$Yes

rlog18<-cruzadalogistica(data=senbis,vardep="gana",
                          listconti=c("P30","P32","P33"),
                          listclass=c("C16","C17","C28","C27"),
                          grupos=5,sinicio=23461,repe=10)
rlog18$modelo="Log18"

medias3bis<-as.data.frame(rlog18[1])
medias3bis$modelo<-"rlog18"
predi3<-as.data.frame(rlog18[2])
predi3$rlog18<-predi3$Yes

red_3<-cruzadaavnnetbin(data=senbis,vardep="gana",
                       listconti=c("P30","P32","P33"),
                       listclass=c("C25","C27","C29"),
                       grupos=5,sinicio=23461,repe=10,size=c(3),decay=c(0.1),repeticiones=5,itera=200)

red_3$modelo="Red3"

medias4bis<-as.data.frame(red_3[1])
medias4bis$modelo<-"avnnet"
predi4<-as.data.frame(red_3[2])
predi4$avnnet<-predi4$Yes

red_20<-cruzadaavnnetbin(data=senbis,vardep="gana",
                        listconti=c("P30","P32","P33"),
                        listclass=c("C16","C17","C25"),
                        grupos=4,sinicio=23461,repe=10,size=c(3),decay=c(0.001),repeticiones=5,itera=200)

red_20$modelo="Red20"

medias11bis<-as.data.frame(red_20[1])
medias11bis$modelo<-"avnnet2"
predi11<-as.data.frame(red_20[2])
predi11$avnnet2<-predi11$Yes

t_forest3<-cruzadarfbin(data=senbis, vardep="gana",
                        listconti=c("P1","P3","P4","P5","P6","P7","P8","P9","P10","P11","P12","P19","P26","P30","P31","P32","P33"),
                        listclass=c("C13","C14","C15","C16","C17","C18","C20","C21","C22","C23","C24","C25","C27","C28","C29"),
                        grupos=5,sinicio=23461,repe=10,nodesize=10,
                        mtry=32,ntree=500,replace=TRUE,sampsize=300)

t_forest3$modelo="bagging_3"

medias5bis<-as.data.frame(t_forest3[1])
medias5bis$modelo<-"Bagg1"
predi5<-as.data.frame(t_forest3[2])
predi5$Bagg1<-predi5$Yes

t_forest4<-cruzadarfbin(data=senbis, vardep="gana",
                        listconti=c("P1","P3","P4","P5","P6","P7","P8","P9","P10","P11","P12","P19","P26","P30","P31","P32","P33"),
                        listclass=c("C13","C14","C15","C16","C17","C18","C20","C21","C22","C23","C24","C25","C27","C28","C29"),
                        grupos=5,sinicio=23461,repe=10,nodesize=5,
                        mtry=32,ntree=500,replace=TRUE,sampsize=200)

t_forest4$modelo="bagging_4"

medias6bis<-as.data.frame(t_forest4[1])
medias6bis$modelo<-"Bagg2"
predi6<-as.data.frame(t_forest4[2])
predi6$Bagg2<-predi6$Yes


t_forest15<-cruzadarfbin(data=senbis, vardep="gana",
                         listconti=c("P1","P3","P4","P5","P6","P7","P8","P9","P10","P11","P12","P19","P26","P30","P31","P32","P33"),
                         listclass=c("C13","C14","C15","C16","C17","C18","C20","C21","C22","C23","C24","C25","C27","C28","C29"),
                         grupos=5,sinicio=23461,repe=10,nodesize=20,
                         mtry=11,ntree=500,replace=TRUE,sampsize=200)

t_forest15$modelo="Forest_5"

medias7bis<-as.data.frame(t_forest15[1])
medias7bis$modelo<-"RF1"
predi7<-as.data.frame(t_forest15[2])
predi7$RF1<-predi4$Yes

t_forest20<-cruzadarfbin(data=sen1bis, vardep="gana",
                         listconti=c("P1","P3","P4","P6","P8","P9","P11","P30","P31","P32","P33"),
                         listclass=c(""),
                         grupos=5,sinicio=23461,repe=10,nodesize=15,
                         mtry=4,ntree=500,replace=TRUE,sampsize=200)
t_forest20$modelo="Forest_10"

medias8bis<-as.data.frame(t_forest20[1])
medias8bis$modelo<-"RF2"
predi8<-as.data.frame(t_forest20[2])
predi8$RF2<-predi8$Yes

t_boost6<-cruzadagbmbin(data=sen1bis, vardep="gana",
                        listconti=c("P1","P3","P4","P5","P6","P7","P8","P9","P10","P11","P12","P30","P31","P32","P33"),
                        listclass=c(""),
                        grupos=5,sinicio=23461,repe=10,
                        n.minobsinnode=20,shrinkage=0.001,n.trees=5000,interaction.depth=2)

t_boost6$modelo="gbm_6" 

medias9bis<-as.data.frame(t_boost6[1])
medias9bis$modelo<-"gmb"
predi9<-as.data.frame(t_boost6[2])
predi9$gmb<-predi9$Yes

xgboost8<-cruzadaxgbmbin(data=sen1bis, vardep="gana",
                        listconti=c("P1","P33","P32","P7","P5","P11","P6","P3","P30","P31","P4","P8","P12","P9"),
                        listclass=c(""),
                        grupos=5,sinicio=23461,repe=10,
                        min_child_weight=5,eta=0.01,nrounds=200,max_depth=3,
                        gamma=0,colsample_bytree=0.8,subsample=1,
                        alpha=0,lambda=0,lambda_bias=0)
xgboost8$modelo="xgbm_"

medias10bis<-as.data.frame(xgboost8[1])
medias10bis$modelo<-"xgmb"
predi10<-as.data.frame(xgboost8[2])
predi10$xgmb<-predi10$Yes


union1<-rbind(medias2bis,medias3bis,medias4bis,medias5bis,medias6bis,medias7bis,medias8bis,medias9bis,medias10bis,medias11bis)

#union1<-rbind(medias1bis,medias2bis,medias3bis,medias4bis,medias7bis,medias8bis,medias9bis,medias10bis)


par(cex.axis=0.8)
boxplot(data=union1,tasa~modelo,col="pink",main='TASA FALLOS')
boxplot(data=union1,auc~modelo,col="pink",main='AUC')

# CONSTRUCCIÃN DE TODOS LOS ENSAMBLADOS
# SE UTILIZARÃN LOS ARCHIVOS SURGIDOS DE LAS FUNCIONES LLAMADOS predi1,...
rm(unipredi)
unipredi<-cbind(predi2,predi3,predi4,predi7,predi8,predi9,predi10,predi11)


# Esto es para eliminar columnas duplicadas
unipredi<- unipredi[, !duplicated(colnames(unipredi))]

# Construccion de ensamblados, cambiar al gusto

unipredi$predi13<-(unipredi$rlog18+unipredi$avnnet)/2
unipredi$predi12<-(unipredi$rlog18+unipredi$avnnet2)/2
unipredi$predi14<-(unipredi$rlog18+unipredi$RF1)/2
unipredi$predi15<-(unipredi$rlog18+unipredi$RF2)/2
unipredi$predi16<-(unipredi$rlog18+unipredi$gmb)/2
unipredi$predi17<-(unipredi$rlog18+unipredi$xgmb)/2

unipredi$predi18<-(unipredi$rlog9+unipredi$avnnet)/2
unipredi$predi19<-(unipredi$rlog9+unipredi$avnnet2)/2
unipredi$predi21<-(unipredi$rlog9+unipredi$RF1)/2
unipredi$predi22<-(unipredi$rlog9+unipredi$RF2)/2
unipredi$predi23<-(unipredi$rlog9+unipredi$gmb)/2
unipredi$predi24<-(unipredi$rlog9+unipredi$xgmb)/2

unipredi$predi34<-(unipredi$avnnet+unipredi$gmb)/2
unipredi$predi35<-(unipredi$avnnet+unipredi$xgmb)/2
unipredi$predi36<-(unipredi$avnnet2+unipredi$gmb)/2
unipredi$predi37<-(unipredi$avnnet2+unipredi$xgmb)/2

unipredi$predi38<-(unipredi$RF1+unipredi$gmb)/2
unipredi$predi39<-(unipredi$RF1+unipredi$xgmb)/2
unipredi$predi40<-(unipredi$RF2+unipredi$gmb)/2
unipredi$predi41<-(unipredi$RF2+unipredi$xgmb)/2
unipredi$predi42<-(unipredi$gmb+unipredi$xgmb)/2

unipredi$predi43<-(unipredi$rlog18+unipredi$avnnet+unipredi$RF1)/3
unipredi$predi44<-(unipredi$rlog18+unipredi$avnnet+unipredi$RF2)/3
unipredi$predi45<-(unipredi$rlog18+unipredi$avnnet+unipredi$gmb)/3
unipredi$predi46<-(unipredi$rlog18+unipredi$avnnet+unipredi$xgmb)/3
unipredi$predi47<-(unipredi$rlog18+unipredi$RF1+unipredi$gmb)/3
unipredi$predi48<-(unipredi$rlog18+unipredi$RF1+unipredi$xgmb)/3
unipredi$predi49<-(unipredi$rlog18+unipredi$gmb+unipredi$xgmb)/3
unipredi$predi50<-(unipredi$rlog18+unipredi$RF2+unipredi$gmb)/3
unipredi$predi51<-(unipredi$rlog18+unipredi$RF2+unipredi$xgmb)/3
unipredi$predi52<-(unipredi$rlog18+unipredi$gmb+unipredi$xgmb)/3

unipredi$predi53<-(unipredi$rlog9+unipredi$avnnet+unipredi$RF1)/3
unipredi$predi54<-(unipredi$rlog9+unipredi$avnnet+unipredi$RF2)/3
unipredi$predi55<-(unipredi$rlog9+unipredi$avnnet+unipredi$gmb)/3
unipredi$predi56<-(unipredi$rlog9+unipredi$avnnet+unipredi$xgmb)/3
unipredi$predi57<-(unipredi$rlog9+unipredi$RF1+unipredi$gmb)/3
unipredi$predi58<-(unipredi$rlog9+unipredi$RF1+unipredi$xgmb)/3
unipredi$predi59<-(unipredi$rlog9+unipredi$gmb+unipredi$xgmb)/3
unipredi$predi60<-(unipredi$rlog9+unipredi$RF2+unipredi$gmb)/3
unipredi$predi61<-(unipredi$rlog9+unipredi$RF2+unipredi$xgmb)/3
unipredi$predi62<-(unipredi$rlog9+unipredi$gmb+unipredi$xgmb)/3

unipredi$predi63<-(unipredi$rlog18+unipredi$avnnet+unipredi$RF1)/3
unipredi$predi64<-(unipredi$rlog18+unipredi$avnnet+unipredi$RF2)/3
unipredi$predi65<-(unipredi$rlog18+unipredi$avnnet+unipredi$gmb)/3
unipredi$predi66<-(unipredi$rlog18+unipredi$avnnet+unipredi$xgmb)/3

unipredi$predi67<-(unipredi$rlog9+unipredi$avnnet2+unipredi$RF1)/3
unipredi$predi68<-(unipredi$rlog9+unipredi$avnnet2+unipredi$RF2)/3
unipredi$predi69<-(unipredi$rlog9+unipredi$avnnet2+unipredi$gmb)/3
unipredi$predi70<-(unipredi$rlog9+unipredi$avnnet2+unipredi$xgmb)/3



# Listado de modelos a considerar, cambiar al gusto

dput(names(unipredi))
#"avnnet",

listado<-c("rlog18","rlog9","avnnet","RF1","RF2","gmb","xgmb","avnnet2","predi12","predi13","predi16", "predi17","predi21",
           "predi22", "predi23", "predi24", "predi34", "predi35","predi36", "predi37","predi38", "predi39", "predi40", "predi41", "predi42",
           "predi43", "predi44", "predi45", "predi46", "predi47", "predi48","predi49", "predi50", "predi51", "predi52", "predi53", "predi54",
           "predi55", "predi56", "predi57", "predi58", "predi59", "predi60", "predi61", "predi62", "predi63", "predi64", "predi65", "predi66",
           "predi67", "predi68", "predi69", "predi70")

dput(names(listado))

# Cambio a Yes, No, todas las predicciones

# Defino funcion tasafallos

tasafallos<-function(x,y) {
  confu<-confusionMatrix(x,y)
  tasa<-confu[[3]][1]
  return(tasa)
}

auc<-function(x,y) {
  curvaroc<-roc(response=x,predictor=y)
  auc<-curvaroc$auc
  return(auc)
}

# Se obtiene el numero de repeticiones CV y se calculan las medias por repe en
# el data frame medias0

repeticiones<-nlevels(factor(unipredi$Rep))
unipredi$Rep<-as.factor(unipredi$Rep)
unipredi$Rep<-as.numeric(unipredi$Rep)


medias0<-data.frame(c())
for (prediccion in listado)
{
  unipredi$proba<-unipredi[,prediccion]
  unipredi[,prediccion]<-ifelse(unipredi[,prediccion]>0.5,"Yes","No")
  for (repe in 1:repeticiones)
  {
    paso <- unipredi[(unipredi$Rep==repe),]
    pre<-factor(paso[,prediccion])
    archi<-paso[,c("proba","obs")]
    archi<-archi[order(archi$proba),]
    obs<-paso[,c("obs")]
    tasa=1-tasafallos(pre,obs)
    t<-as.data.frame(tasa)
    t$modelo<-prediccion
    auc<-auc(archi$obs,archi$proba)
    t$auc<-auc
    medias0<-rbind(medias0,t)
  }
}

# Finalmente boxplot

par(cex.axis=1.0,las=2)
boxplot(data=medias0,tasa~modelo,col="pink",main="TASA FALLOS")

# Para AUC se utiliza la variable auc del archivo medias0

boxplot(data=medias0,auc~modelo,col="pink",main="AUC")

# PRESENTACION TABLA MEDIAS

tablamedias<-medias0 %>%
  group_by(modelo) %>%
  summarize(tasa=mean(tasa))     

tablamedias<-tablamedias[order(tablamedias$tasa),]


# ORDENACIÃN DEL FACTOR MODELO POR LAS MEDIAS EN TASA
# PARA EL GRAFICO

medias0$modelo <- with(medias0,
                       reorder(modelo,tasa, mean))
par(cex.axis=0.7,las=2)
boxplot(data=medias0,tasa~modelo,col="pink", main='TASA FALLOS')

# ************************************
# PARA AUC
# ************************************

# PRESENTACION TABLA MEDIAS

tablamedias2<-medias0 %>%
  group_by(modelo) %>%
  summarize(auc=mean(auc))     

tablamedias2<-tablamedias2[order(-tablamedias2$auc),]


*******************************************************************************************************************
**********************************************   PREDICCIÓN   *****************************************************

trainm<-sparse.model.matrix(gana ~ .-1, data=train)
head(trainm)

train_label <- train[,"gana"]
train_matrix <- xgb.DMatrix(data=as.matrix(trainm),label =train_label)

testm <- sparse.model.matrix(gana~.-1, data=test)
test_label <- test [,"gana"]
test_matrix <- xgb.DMatrix(data=as.matrix(testm), label= test_label)

nc <- length((unique(train_label)))

xgb_params<-list("objetive"="multi:softprob",
                 "eval_metric"="mlogloss",
                 "num_class"=2)

watchlist <- list(train=train_matrix, test=test_matrix)
#watchlist = watchlist,
#objective = "multi:softprob"    "binary:logistic"
#eval_metric = "merror",
#data = train_matrix,



model<- xgb.train(data = train_matrix,
                      params=xgb_params,
                      eta = 0.01,
                      watchlist = watchlist,
                      max_depth = 3, 
                      nrounds=300, 
                      subsample = 1,
                      colsample_bytree = 0.8,
                      missing=NA,
                      seed=333
                      #eval_metric = "mlogloss",
                      #objective = "multi:softprob",
                      #num_class = 2,
                      #nthread = 5
)

e<-data.frame(model$evaluation_log)
plot(e$iter, e$train_mlogloss, col= 'blue')
lines(e$iter, e$test_mlogloss, col ='red')

min(e$test_mlogloss)
e[e$test_mlogloss==0.523822,]  #sin parámetros
e[e$test_mlogloss==0.489389,] #modif par{ametros}
e[e$test_mlogloss==0.485573,]  #300 arboles

imp <- xgb.importance(colnames(train_matrix), model=model)
print(imp)
xgb.plot.importance(imp)

p<-predict(model, newdata=test_matrix)
predicion<-matrix(p, nrow = nc, ncol=length(p)/nc) %>%
            t() %>%
            data.frame() %>%
            mutate(label = test_label, max_prob = max.col(., "last")-1)
#mATRIZ CONFUSION
table(Prediction = pred$max_prob, Actual =pred$label)

#VALIDACION

validm<-sparse.model.matrix(gana ~ .-1, data=pre18bis)
head(validm)

val_label <- pre18bis[,"gana"]
val_matrix <- xgb.DMatrix(data=as.matrix(validm),label =val_label)

#pred_mod = predict(bst_model,newdata =sparse.model.matrix(gana ~ .-1, data=pre18bis),type="response")

y_pred<-predict(model, newdata=val_matrix)
#y_pred <- predict(model, sparse.model.matrix(gana ~ .-1, data=pre18bis))
#y_pred1 <- ifelse(y_pred > 0.5,1,0)

xg2_val <- data.frame("Prediction" = y_pred,
                      "Names" = rownames(pre18bis),
                      "Gana" = pre18bis$gana)

predicion<-matrix(y_pred, nrow = nc, ncol=length(y_pred)/nc) %>%
  t() %>%
  data.frame() %>%
  mutate(label = pre18bis$gana, max_prob = max.col(., "last")-1)
#mATRIZ CONFUSION
table(Prediction = y_pred$max_prob, Actual =y_pred$label)


#xg2_val$Names <- factor(xg2_val$Names,
#                        levels = xg2_val$gana[order(xg2_val$gana)])


write.table(xg2_val,"pred.csv",sep=";")

write.csv(y_pred, file = "newfile.csv")

